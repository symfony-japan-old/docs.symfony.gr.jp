
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>内部構造 | Symfony2日本語ドキュメント</title>
    <link rel="stylesheet" href="../static/basic.css" type="text/css" />
    <link rel="stylesheet" href="../static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../static/configurationblock.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '1.0.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../static/jquery.js"></script>
    <script type="text/javascript" src="../static/underscore.js"></script>
    <script type="text/javascript" src="../static/doctools.js"></script>
      <script type="text/javascript" src="../static/js/jquery.corner.js"></script>
      <script type="text/javascript" src="../static/configurationblock.js"></script>
      <script type="text/javascript">
      $(function(){
          $('.section h1').corner();
          $('.highlight-python pre').corner();
          $('.highlight-yml pre').corner();
          $('.highlight').corner();
      });
      </script>
    <link rel="top" title="Symfony2Doc 1.0.0 documentation" href="../index.html" />
    <link rel="up" title="ガイドブック" href="index.html" />
    <link rel="next" title="Symfony2 ステーブル API" href="stable_api.html" />
    <link rel="prev" title="パフォーマンス" href="performance.html" /> 
  </head>
  <body>
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/ja_JP/all.js#xfbml=1&appId=47270766548";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<div id="all">
  <div id="content">
    <div id="content_wrapper">
      <div id="top_menu">
        <div id="top_menu_wrapper">
        </div>
      </div>
      <div id="header_top">
        <h1 id="logo_top"><a href="http://docs.symfony.gr.jp/">Symfonyユーザー会ドキュメントポータル</a></h1>
        <div id="header_top_left"></div>
      </div>
      <!-- end #header -->
      <div id="navbar">
        <ul>
          <li><a href="../index.html">トップ（索引）</a></li>
          <li><a href="../quick_tour/index.html">クイックツアー</a></li>
          <li><a href="index.html">ガイドブック</a></li>
          <li><a href="../cookbook/index.html">クックブック</a></li>
          <li><a href="../components/index.html">コンポーネント</a></li>
          <li><a href="../reference/index.html">リファレンス</a></li>
          <li><a href="../contributing/index.html">貢献</a></li>
          <li><a href="http://www.symfony.gr.jp/">日本Symfonyユーザー会</a></li>
        </ul>
      </div>
      <!-- end #navbar -->
      <div id="main">  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="index-0">
<span id="id1"></span><h1>内部構造<a class="headerlink" href="#index-0" title="Permalink to this headline">¶</a></h1>
<p>Symfony2 内部の動作や拡張方法について、さらに知りたいと思ったのではないでしょうか。
この章では、Symfony2 の内部構造の詳細について説明します。</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">Symfony2 が背後でどのように動作しているのかを知りたい場合や、Symfony2 自体を拡張したいといった場合に、この章を読んでください。</p>
</div>
<div class="section" id="id2">
<h2>概観<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<p>Symfony2 のコードは、いくつかの独立したレイヤーで構成されています。
以降で説明する各レイヤーは、1 つ手前のレイヤーの上に位置づけられます。</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">オートロードは、フレームワークでは直接管理されていません。
フレームワークとは独立し、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\ClassLoader\UniversalClassLoader</span></tt> クラスと <tt class="docutils literal"><span class="pre">src/autoload.php</span></tt> ファイルを使ってオートロードが行われます。
オートロードに関する詳細は、<a class="reference internal" href="../cookbook/tools/autoloader.html"><em>オートローダーの章</em></a>を参照してください。</p>
</div>
<div class="section" id="httpfoundation">
<h3><tt class="docutils literal"><span class="pre">HttpFoundation</span></tt> コンポーネント<a class="headerlink" href="#httpfoundation" title="Permalink to this headline">¶</a></h3>
<p>最も最下層に位置するのが、<a href="#id3"><span class="problematic" id="id4">:namespace:`Symfony\\Component\\HttpFoundation`</span></a> コンポーネントです。
HttpFoundation には、HTTP を扱うのに必要なオブジェクトがあります。
これらは、PHP のネイティブ関数や変数のいくつかをオブジェクト指向で抽象化したものです。</p>
<ul class="simple">
<li><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpFoundation\Request</span></tt> クラスは、PHP の主要なグローバル変数である <tt class="docutils literal"><span class="pre">$_GET</span></tt>、<tt class="docutils literal"><span class="pre">$_POST</span></tt>、<tt class="docutils literal"><span class="pre">$_COOKIE</span></tt>、<tt class="docutils literal"><span class="pre">$_FILES</span></tt>、<tt class="docutils literal"><span class="pre">$_SERVER</span></tt> を抽象化しています。</li>
<li><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpFoundation\Response</span></tt> クラスは、<tt class="docutils literal"><span class="pre">header()</span></tt> 、<tt class="docutils literal"><span class="pre">setcookie()</span></tt>、<tt class="docutils literal"><span class="pre">echo</span></tt> などの PHP 関数を抽象化しています。</li>
<li><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpFoundation\Session</span></tt> クラスと <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpFoundation\SessionStorage\SessionStorageInterface</span></tt> インタフェースは、セッションを管理するための <tt class="docutils literal"><span class="pre">session_*()</span></tt> 関数などを抽象化しています。</li>
</ul>
</div>
<div class="section" id="httpkernel">
<h3><tt class="docutils literal"><span class="pre">HttpKernel</span></tt> コンポーネント<a class="headerlink" href="#httpkernel" title="Permalink to this headline">¶</a></h3>
<p>HttpFoundation の上のレイヤーは、<a href="#id5"><span class="problematic" id="id6">:namespace:`Symfony\\Component\\HttpKernel`</span></a> コンポーネントです。
HttpKernel HTTP の動的な機能を担当します。
Request クラスや Response クラスの薄いラッパーで、リクエストの標準的な処理方法を提供します。
また、オーバーヘッドの少ない Web フレームワークを作成するための、拡張ポイントやツールもこのレイヤーで提供されています。</p>
<p>また、依存性注入 (Dependency Injection) コンポーネントや強力なプラグインシステム (バンドル) もこのレイヤーで提供されており、設定や拡張を柔軟に行なえます。</p>
<div class="admonition seealso">
<p class="first admonition-title">See also</p>
<p class="last"><tt class="xref doc docutils literal"><span class="pre">HttpKernel</span> <span class="pre">コンポーネントに関する詳細</span></tt>、
<a class="reference internal" href="service_container.html"><em>依存性注入 (Dependency Injection)</em></a>、
<a class="reference internal" href="../cookbook/bundles/best_practices.html"><em>バンドルについて</em></a></p>
</div>
</div>
<div class="section" id="frameworkbundle">
<h3><tt class="docutils literal"><span class="pre">FrameworkBundle</span></tt> バンドル<a class="headerlink" href="#frameworkbundle" title="Permalink to this headline">¶</a></h3>
<p><a href="#id7"><span class="problematic" id="id8">:namespace:`Symfony\\Bundle\\FrameworkBundle`</span></a> バンドルは、主要なコンポーネントやライブラリを結びつけ、軽量で高速な MVC フレームワークとしてまとめあげたものです。
デフォルトの設定や規約は実用的なので、とてもスムーズに習得することができます。</p>
</div>
</div>
<div class="section" id="index-1">
<span id="id9"></span><h2>カーネル<a class="headerlink" href="#index-1" title="Permalink to this headline">¶</a></h2>
<p><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\HttpKernel</span></tt> クラスは Symfony2 の中心となるクラスで、クライアントからのリクエストの処理を担当します。
この処理の主な内容は、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpFoundation\Request</span></tt> オブジェクトをを受け取り、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpFoundation\Response</span></tt> オブジェクトに変換することです。</p>
<p>Symfony2 のカーネルクラスは、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\HttpKernelInterface</span></tt> インターフェイスを実装する必要があります。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$type</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">MASTER_REQUEST</span><span class="p">,</span> <span class="nv">$catch</span> <span class="o">=</span> <span class="k">true</span><span class="p">)</span>
</pre></div>
</div>
<div class="section" id="index-2">
<span id="id10"></span><h3>コントローラ<a class="headerlink" href="#index-2" title="Permalink to this headline">¶</a></h3>
<p>Request を Response に変換するために、カーネルは &#8220;コントローラ&#8221; を利用します。
コントローラには、PHP の関数としてコール可能な任意の構造を利用できます。</p>
<p>カーネルは、実行するべきコントローラを見つける処理を、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Controller\ControllerResolverInterface</span></tt> の実装クラスへ委譲します。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">getController</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">);</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">getArguments</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$controller</span><span class="p">);</span>
</pre></div>
</div>
<p><a href="#id11"><span class="problematic" id="id12">:method:`Symfony\\Component\\HttpKernel\\Controller\\ControllerResolverInterface::getController`</span></a> メソッドは、特定の Request オブジェクトに対応するコントローラ (呼び出し可能な PHP コード) を返します。
このメソッドのデフォルトの実装 (<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Controller\ControllerResolver</span></tt>)では、リクエストの属性に設定された <tt class="docutils literal"><span class="pre">_controller</span></tt>を元にコントローラを特定します。この属性には、<tt class="docutils literal"><span class="pre">Bundle\BlogBundle\PostController:indexAction</span></tt> のように &#8220;クラス::メソッド&#8221; という形式の文字列で、コントローラ名が格納されています。
).</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">デフォルトの実装では、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Bundle\FrameworkBundle\EventListener\RouterListener</span></tt>を使って Request オブジェクトの <tt class="docutils literal"><span class="pre">_controller</span></tt> 属性を定義しています (<a class="reference internal" href="#kernel-core-request"><em>kernel.request イベント</em></a> も参照してください)。</p>
</div>
<p><a href="#id13"><span class="problematic" id="id14">:method:`Symfony\\Component\\HttpKernel\\Controller\\ControllerResolverInterface::getArguments`</span></a> メソッドは、コール可能な PHP コードであるコントローラへ渡す、引数の配列を返します。
このメソッドのデフォルトの実装では、Request オブジェクトの属性を基に、対象となるメソッドの引数が自動的に解決されます。</p>
<div class="sidebar">
<p class="first sidebar-title">コントローラメソッドの引数と Request オブジェクトの属性のマッチング</p>
<p>メソッドのそれぞれの引数に対して、Request オブジェクトで同じ名前の属性が取得されます。
同じ名前の属性が Request オブジェクトに定義されておらず、かつ引数のデフォルト値が定義されている場合は、デフォルト値が使われます。</p>
<div class="last highlight-php"><div class="highlight"><pre><span class="c1">// Symfony2 により、必須の &#39;id&#39; 属性と、</span>
<span class="c1">// 任意の &#39;admin&#39; 属性が Request オブジェクトから取得される。</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">showAction</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$admin</span> <span class="o">=</span> <span class="k">true</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="index-3">
<span id="id15"></span><h3>リクエストの処理<a class="headerlink" href="#index-3" title="Permalink to this headline">¶</a></h3>
<p><tt class="docutils literal"><span class="pre">handle()</span></tt> メソッドは <tt class="docutils literal"><span class="pre">Request</span></tt> オブジェクトを引数にとり、戻り値で必ず <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトを返します。
<tt class="docutils literal"><span class="pre">Request</span></tt> オブジェクトを変換するために、<tt class="docutils literal"><span class="pre">handle()</span></tt> メソッドは、Resolver オブジェクトと、順序付けられたイベント通知のチェーンを利用します (各イベントに関する詳細は、後の節を参照してください):</p>
<ol class="arabic simple">
<li>何らかの処理を行う前に、<tt class="docutils literal"><span class="pre">kernel.request</span></tt> イベントが通知されます &#8211;
もしリスナーの 1 つから <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトが返された場合は、ステップ 8 まで処理をスキップします。</li>
<li>Resolver が呼び出され、実行するコントローラが決定されます。</li>
<li><tt class="docutils literal"><span class="pre">kernel.controller</span></tt> イベントのリスナーにより、コントローラに対する任意の処理 (変更、ラッピング、その他) が行われます。</li>
<li>Kernel により、コントローラが実際にコール可能かどうかのチェックが行われます。</li>
<li>Resolver が呼び出され、コントローラへ渡す引数が決定されます。</li>
<li>カーネルからコントローラが呼び出されます。</li>
<li>コントローラから <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトが返されない場合は、<tt class="docutils literal"><span class="pre">kernel.view</span></tt> イベントのリスナーにより、コントローラの戻り値の <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトへの変換が行われます。</li>
<li><tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントのリスナーにより、<tt class="docutils literal"><span class="pre">Response</span></tt>オブジェクト (コンテンツやヘッダー) の処理が行われます。</li>
<li>クライアントへレスポンスが返されます。</li>
</ol>
<p>処理中に例外がスローされた場合は、<tt class="docutils literal"><span class="pre">kernel.exception</span></tt> イベントが通知されるので、このイベントのリスナーにより例外を Response オブジェクトに変換することができます。
正常に処理が完了した場合は <tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントが通知されます。
正常に処理が完了しなかった場合は、例外が再度スローされます。</p>
<p>たとえば埋め込みリクエストを使っている場合に例外をキャッチされないようにするには、<tt class="docutils literal"><span class="pre">handle()</span></tt>メソッドの 3 番目の引数に <tt class="docutils literal"><span class="pre">false</span></tt> を指定して、<tt class="docutils literal"><span class="pre">kernel.exception</span></tt> イベントを無効にしてください。</p>
</div>
<div class="section" id="index-4">
<span id="id16"></span><h3>内部リクエスト<a class="headerlink" href="#index-4" title="Permalink to this headline">¶</a></h3>
<p>&#8216;マスター&#8217;リクエストを処理する際は、サブリクエストを処理することもできます。
<tt class="docutils literal"><span class="pre">handle()</span></tt> メソッドの 2 番目の引数に、次のようなリクエストの種類を指定します:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">HttpKernelInterface::MASTER_REQUEST</span></tt></li>
<li><tt class="docutils literal"><span class="pre">HttpKernelInterface::SUB_REQUEST</span></tt></li>
</ul>
<p>リクエストの種類はすべてのイベントに渡されるので、リスナーはイベントの種類に応じた処理を実行できます。
たとえば、マスターリクエストの場合にのみ処理を実行したい場合などに役に立ちます。</p>
</div>
<div class="section" id="index-5">
<span id="id17"></span><h3>イベント<a class="headerlink" href="#index-5" title="Permalink to this headline">¶</a></h3>
<p>Kernel によってスローされるイベントは、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\KernelEvent</span></tt>のサブクラスです。
つまり、各イベントでは次のような共通の情報にアクセスできます:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">getRequestType()</span></tt> - リクエストの<em>種類</em> (<tt class="docutils literal"><span class="pre">HttpKernelInterface::MASTER_REQUEST</span></tt> または <tt class="docutils literal"><span class="pre">HttpKernelInterface::SUB_REQUEST</span></tt>) を返します。</li>
<li><tt class="docutils literal"><span class="pre">getKernel()</span></tt> - リクエストを処理しているカーネルを返します。</li>
<li><tt class="docutils literal"><span class="pre">getRequest()</span></tt> - 現在処理中の <tt class="docutils literal"><span class="pre">Request</span></tt> オブジェクトを返します。</li>
</ul>
<div class="section" id="getrequesttype">
<h4><tt class="docutils literal"><span class="pre">getRequestType()</span></tt><a class="headerlink" href="#getrequesttype" title="Permalink to this headline">¶</a></h4>
<p><tt class="docutils literal"><span class="pre">getRequestType()</span></tt> メソッドを使って、リスナー側でリクエストの種類を取得できます。
たとえば、マスターリクエストの場合にのみリスナーの処理を実行したい場合は、リスナーメソッドの先頭に次のコードを追加してください。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\HttpKernelInterface</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">HttpKernelInterface</span><span class="o">::</span><span class="na">MASTER_REQUEST</span> <span class="o">!==</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getRequestType</span><span class="p">())</span> <span class="p">{</span>
    <span class="c1">// return immediately</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Symfony2 のイベントディスパッチャーについて詳しく学びたい方は、<a class="reference internal" href="#event-dispatcher"><em>イベント</em></a> の章をお読みください。</p>
</div>
</div>
<div class="section" id="kernel-request">
<span id="kernel-core-request"></span><span id="index-6"></span><h4><tt class="docutils literal"><span class="pre">kernel.request</span></tt> イベント<a class="headerlink" href="#kernel-request" title="Permalink to this headline">¶</a></h4>
<p><em>イベントクラス</em>: <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\GetResponseEvent</span></tt></p>
<p>このイベントは、ただちに <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトを返すか、イベントの後に呼び出されるコントローラへ渡す変数をセットアップします。
どのリスナーも、イベントオブジェクトの <tt class="docutils literal"><span class="pre">setResponse()</span></tt> メソッドを使って <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクト返すことができます。
Response オブジェクトが返された場合、他のすべてのリスナーは呼び出されません。</p>
<p>このイベントは、<tt class="docutils literal"><span class="pre">FrameworkBundle</span></tt> で <tt class="docutils literal"><span class="pre">Request</span></tt> オブジェクトの <tt class="docutils literal"><span class="pre">_controller</span></tt> 属性の値を設定するときに、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Bundle\FrameworkBundle\EventListener\RouterListener</span></tt> で使われます。
RequestListener では、<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\Routing\RouterInterface</span></tt> インタフェースを実装したオブジェクトを使って <tt class="docutils literal"><span class="pre">Request</span></tt> のマッチングが行われ、コントローラ名が決定され、<tt class="docutils literal"><span class="pre">Request</span></tt> オブジェクトの <tt class="docutils literal"><span class="pre">_controller</span></tt> 属性に保存されます。</p>
</div>
<div class="section" id="kernel-controller">
<span id="index-7"></span><h4><tt class="docutils literal"><span class="pre">kernel.controller</span></tt> イベント<a class="headerlink" href="#kernel-controller" title="Permalink to this headline">¶</a></h4>
<p><em>イベントクラス</em>: <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\FilterControllerEvent</span></tt></p>
<p>このイベントは、<tt class="docutils literal"><span class="pre">FrameworkBundle</span></tt> では使われていません。
実行するコントローラを変更したい場合のエントリポイントとして、このイベントを使用できます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\FilterControllerEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelController</span><span class="p">(</span><span class="nx">FilterControllerEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$controller</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getController</span><span class="p">();</span>
    <span class="c1">// ...</span>

    <span class="c1">// the controller can be changed to any PHP callable</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setController</span><span class="p">(</span><span class="nv">$controller</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="kernel-view">
<span id="index-8"></span><h4><tt class="docutils literal"><span class="pre">kernel.view</span></tt> イベント<a class="headerlink" href="#kernel-view" title="Permalink to this headline">¶</a></h4>
<p><em>イベントクラス</em>: <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent</span></tt></p>
<p>このイベントは、<tt class="docutils literal"><span class="pre">FrameworkBundle</span></tt> では使われていません。
ビューサブシステムを実装したい場合に、このイベントを使用できます。
このイベントは、コントローラから <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトが <em>返されなかった場合にのみ</em> 呼び出されます。
イベントの目的は、コントローラから任意の戻り値を返せるようにし、それを <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトへ変換することです。</p>
<p><tt class="docutils literal"><span class="pre">getControllerResult</span></tt> メソッドを使うと、コントローラの戻り値にアクセスできます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelView</span><span class="p">(</span><span class="nx">GetResponseForControllerResultEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$val</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getReturnValue</span><span class="p">();</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>
    <span class="c1">// some how customize the Response from the return value</span>

    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="kernel-response">
<span id="index-9"></span><h4><tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベント<a class="headerlink" href="#kernel-response" title="Permalink to this headline">¶</a></h4>
<p><em>イベントクラス</em>: <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\FilterResponseEvent</span></tt></p>
<p>このイベントの目的は、<tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトが作られた後で、そのオブジェクトを他のシステムから変更または置き換えできるようにすることです。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelResponse</span><span class="p">(</span><span class="nx">FilterResponseEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">();</span>
    <span class="c1">// .. modify the response object</span>
<span class="p">}</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">FrameworkBundle</span></tt> では、いくつかのリスナーが登録されます。</p>
<ul class="simple">
<li><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\EventListener\ProfilerListener</span></tt>:
現在のリクエストのデータを収集します。</li>
<li><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener</span></tt>:
Web デバッグツールバーを挿入します。</li>
<li><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\EventListener\ResponseListener</span></tt>: Response オブジェクトの <tt class="docutils literal"><span class="pre">Content-Type</span></tt> を、リクエストのフォーマットに基づいて修正します。</li>
<li><tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\EventListener\EsiListener</span></tt>: Response で ESI タグのパースが必要な場合に <tt class="docutils literal"><span class="pre">Surrogate-Control</span></tt> HTTP ヘッダーを追加します。</li>
</ul>
</div>
<div class="section" id="kernel-exception">
<span id="kernel-kernel-exception"></span><span id="index-10"></span><h4><tt class="docutils literal"><span class="pre">kernel.exception</span></tt> イベント<a class="headerlink" href="#kernel-exception" title="Permalink to this headline">¶</a></h4>
<p><em>イベントクラス</em>: <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent</span></tt></p>
<p><tt class="docutils literal"><span class="pre">FrameworkBundle</span></tt> では <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\EventListener\ExceptionListener</span></tt> が登録されています。
このリスナーでは、例外がスローされた場合に、指定されたコントローラへ <tt class="docutils literal"><span class="pre">Request</span></tt> をフォワードします。コントローラは <tt class="docutils literal"><span class="pre">exception_listener.controller</span></tt> パラメータに、<tt class="docutils literal"><span class="pre">class::method</span></tt> 形式で指定します。</p>
<p>このイベントのリスナーでは、<tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトを作成して設定するか、新しい <tt class="docutils literal"><span class="pre">Exception</span></tt> オブジェクトを作成するか、または何もしません。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpFoundation\Response</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelException</span><span class="p">(</span><span class="nx">GetResponseForExceptionEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$exception</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getException</span><span class="p">();</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">();</span>
    <span class="c1">// 現在の例外に基づいて Response オブジェクトをセットアップする</span>
    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">setResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>

    <span class="c1">// 上記の代わりに新しい Exception オブジェクトを設定することもできる</span>
    <span class="c1">// $exception = new \Exception(&#39;Some special exception&#39;);</span>
    <span class="c1">// $event-&gt;setException($exception);</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
</div>
<div class="section" id="index-11">
<span id="id18"></span><h2>イベントディスパッチャー<a class="headerlink" href="#index-11" title="Permalink to this headline">¶</a></h2>
<p>オブジェクト指向でコードを記述することは、長い間コードの拡張性を高める手法とされてきました。
責務が明確に定義されたクラスを作成することで、コードは柔軟になり、開発者がサブクラスを作成して振る舞いを変更しやすくなります。
しかし、もし開発者が自分の作成したサブクラスを、同様にサブクラスを開発した他の開発者と共有したい場合に、コードの継承には問題がでてきます。</p>
<p>プラグインシステムを提供する必要があるような現実のプロジェクトについて考えてみましょう。
他のプラグインの実行を阻害することなく、プラグインからメソッドを追加したり、メソッドの処理の前後に何らかの処理を実行したいでしょう。
これは単一の継承では簡単に解決できる問題ではなく、また仮に PHP で多重継承が可能であったとしても多重継承自体の欠点もあります。</p>
<p>Symfony2 のイベントディスパッチャーは、<a class="reference external" href="http://en.wikipedia.org/wiki/Observer_pattern">オブザーバ</a>パターンのシンプルで効率の良い実装です。イベントディスパッチャーにより、先に述べた問題をすべて解決でき、プロジェクトの拡張性を飛躍的に高めることができます。</p>
<p><a class="reference external" href="https://github.com/symfony/HttpKernel">Symfony2 HttpKernel コンポーネント</a>から簡単な例を見てみましょう。
一度 <tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトが作成された後、実際に処理される前に、たとえばキャッシュヘッダーを追加するといった Response オブジェクトの変更を、システムの他の箇所から行えると便利でしょう。
このような変更を行えるように、Symfony2 のカーネルから <tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントが通知されます。
動作は次のようになっています:</p>
<ul class="simple">
<li><em>リスナー</em> (PHP オブジェクト) から<em>ディスパッチャー</em>オブジェクトへ、<tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントを監視することを伝えます。</li>
<li>いくつかの箇所で、Symfony2 カーネルから<em>ディスパッチャー</em>オブジェクトへ、<tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントをディスパッチするよう伝えられます。
この時、<tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトにアクセスできる <tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトがディスパッチャーに渡されます。</li>
<li>ディスパッチャーにより、<tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントのすべてのリスナーへ通知が行われます (リスナーのメソッドの呼び出し等)。
通知されたリスナー側では、<tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトを任意に変更できます。</li>
</ul>
<div class="section" id="event-dispatcher">
<span id="index-12"></span><span id="id19"></span><h3>イベント<a class="headerlink" href="#event-dispatcher" title="Permalink to this headline">¶</a></h3>
<p>イベントが通知される時、イベントを監視しているリスナーの数に関わらず、イベントは <tt class="docutils literal"><span class="pre">kernel.response</span></tt> のようなユニークな名前で識別されます。
<tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\EventDispatcher\Event</span></tt> インスタンスが作成され、すべてのリスナーに渡されます。
後の節で見ていきますが、<tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトには、通知されるイベントに関するデータが含まれています。</p>
<div class="section" id="index-13">
<span id="id20"></span><h4>命名規約<a class="headerlink" href="#index-13" title="Permalink to this headline">¶</a></h4>
<p>ユニークなイベント名には任意の文字列を使えますが、次のような簡単な命名規約に従うことが推奨されています:</p>
<ul class="simple">
<li>小文字、数字、ドット (<tt class="docutils literal"><span class="pre">.</span></tt>) およびアンダースコア (<tt class="docutils literal"><span class="pre">_</span></tt>) のみを使うようにしてください。</li>
<li>プレフィックスに名前空間とドットを使います (例 <tt class="docutils literal"><span class="pre">kernel.</span></tt>)。</li>
<li>実行されるアクションの内容を表す動詞で終わるようにします (例 <tt class="docutils literal"><span class="pre">request</span></tt>)。</li>
</ul>
<p>次に、良いイベント名の例を示します:</p>
<ul class="simple">
<li><tt class="docutils literal"><span class="pre">kernel.response</span></tt></li>
<li><tt class="docutils literal"><span class="pre">form.pre_set_data</span></tt></li>
</ul>
</div>
<div class="section" id="index-14">
<span id="id21"></span><h4>イベント名とイベントオブジェクト<a class="headerlink" href="#index-14" title="Permalink to this headline">¶</a></h4>
<p>ディスパッチャーがリスナーへ通知する時、実際の <tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトがリスナーへ渡されます。
基底の <tt class="docutils literal"><span class="pre">Event</span></tt> クラスはとても単純で、<a class="reference internal" href="#event-dispatcher-event-propagation"><em>イベントの伝播</em></a>を停止するメソッドしかありません。</p>
<p>通常は、特定のイベントに対するリスナーで必要とされるデータは、<tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトとともにリスナーへ渡します。
<tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントの場合、作成され各リスナーへ渡される <tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトは、基底の <tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトのサブクラスである <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\FilterResponseEvent</span></tt> のインスタンスです。
このクラスには <tt class="docutils literal"><span class="pre">getResponse</span></tt> や <tt class="docutils literal"><span class="pre">setResponse</span></tt> といったメソッドがあり、<tt class="docutils literal"><span class="pre">Response</span></tt> オブジェクトを取得したり置き換えたりできます。</p>
<p>通常のストーリーは次のようになります。
イベントに対するリスナーを作成する時、リスナーへ渡される <tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトは専用のサブクラスで、イベントから情報を取得したり、イベントに情報を返すための追加のメソッドを持っています。</p>
</div>
</div>
<div class="section" id="id22">
<h3>ディスパッチャー<a class="headerlink" href="#id22" title="Permalink to this headline">¶</a></h3>
<p>ディスパッチャーは、イベントディスパッチャーシステムの中心となるオブジェクトです。
一般的には、ディスパッチャーオブジェクトが 1 つだけ作られ、リスナーの登録を管理します。
ディスパッチャーからイベントがディスパッチされると、そのイベントに登録されているすべてのリスナーへイベントが通知されます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventDispatcher</span><span class="p">;</span>

<span class="nv">$dispatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventDispatcher</span><span class="p">();</span>
</pre></div>
</div>
</div>
<div class="section" id="index-15">
<span id="id23"></span><h3>リスナーの接続<a class="headerlink" href="#index-15" title="Permalink to this headline">¶</a></h3>
<p>既存のイベントを利用するには、リスナーをディスパッチャーへ接続しておきます。
こうすると、対象のイベントがディスパッチされた時に通知されるようになります。
ディスパッチャーの <tt class="docutils literal"><span class="pre">addListener()</span></tt> メソッドを呼び出して、関数としてコール可能な任意の PHP コードをイベントに関連付けることができます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$listener</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AcmeListener</span><span class="p">();</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addListener</span><span class="p">(</span><span class="s1">&#39;foo.action&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$listener</span><span class="p">,</span> <span class="s1">&#39;onFooAction&#39;</span><span class="p">));</span>
</pre></div>
</div>
<p><tt class="docutils literal"><span class="pre">addListener()</span></tt> メソッドは、次の 3 つの引数をとります。</p>
<ul class="simple">
<li>イベント名 (文字列) リスナーの監視対象とするイベント。</li>
<li>イベントが通知された場合に呼び出される PHP コード。</li>
<li>任意で、優先度を示す整数値 (大きい方がより重要) この値により、リスナーが複数登録されている場合に通知される順番が決まります (デフォルトは <tt class="docutils literal"><span class="pre">0</span></tt>)。
2 つのリスナーが同じ優先度を指定した場合、ディスパッチャーに追加された順に実行されます。</li>
</ul>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p><a class="reference external" href="http://www.php.net/manual/en/language.pseudo-types.php#language.types.callback">関数としてコール可能な PHP コード</a>とは、PHP の変数で、<tt class="docutils literal"><span class="pre">call_user_func()</span></tt> 関数のパラメータに使用でき、<tt class="docutils literal"><span class="pre">is_callable()</span></tt> 関数に渡した場合は <tt class="docutils literal"><span class="pre">true</span></tt> が返されます。
これには、<tt class="docutils literal"><span class="pre">\Closure</span></tt> のインスタンス、関数を指定する文字列、オブジェクトのメソッドやクラスのメソッドを表す配列表現を使えます。</p>
<p>リスナーとして PHP オブジェクトを登録する方法について説明してきましたが、同じように、イベントリスナーとして <a class="reference external" href="http://php.net/manual/en/functions.anonymous.php">Closures</a> を登録することもできます。</p>
<div class="last highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>

<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addListener</span><span class="p">(</span><span class="s1">&#39;foo.action&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Event</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// foo.action イベントがディスパッチされた時に実行される</span>
<span class="p">});</span>
</pre></div>
</div>
</div>
<p>リスナーはディスパッチャーへ登録された後、イベントが通知されるまで待機します。
上の例では、<tt class="docutils literal"><span class="pre">foo.action</span></tt> イベントがディスパッチされると、ディスパッチャーから <tt class="docutils literal"><span class="pre">AcmeListener::onFooAction</span></tt> メソッドが呼び出され、単一の引数として <tt class="docutils literal"><span class="pre">Event</span></tt> オブジェクトが渡されます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AcmeListener</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onFooAction</span><span class="p">(</span><span class="nx">Event</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// do something</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">Symfony2 MVC フレームワークを使っている場合は、<a class="reference internal" href="../reference/dic_tags.html#dic-tags-kernel-event-listener"><em>設定ファイル</em></a> を使ってリスナーを登録できます。
また、リスナーオブジェクトは必要な場合にのみインスタンス化されます。</p>
</div>
<p>多くの場合、リスナーには指定されたイベント独自の <tt class="docutils literal"><span class="pre">Event</span></tt> のサブクラスが渡されます。
これにより、イベントに関する特別な情報にリスナーからアクセスできます。
リスナーに渡されているイベントが、実際にどの <tt class="docutils literal"><span class="pre">Symfony\Component\EventDispatcher\Event</span></tt> インスタンスなのかを判断するには、ドキュメントかソースコードを確認してください。
たとえば、<tt class="docutils literal"><span class="pre">kernel.event</span></tt> イベントは <tt class="docutils literal"><span class="pre">Symfony\Component\HttpKernel\Event\FilterResponseEvent</span></tt> のインスタンスを渡します。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\FilterResponseEvent</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelResponse</span><span class="p">(</span><span class="nx">FilterResponseEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getResponse</span><span class="p">();</span>
    <span class="nv">$request</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getRequest</span><span class="p">();</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</pre></div>
</div>
<span class="target" id="event-dispatcher-closures-as-listeners"></span></div>
<div class="section" id="index-16">
<span id="id24"></span><h3>イベントの作成とディスパッチ<a class="headerlink" href="#index-16" title="Permalink to this headline">¶</a></h3>
<p>既存のイベントに対してリスナーを登録するだけでなく、独自のイベントを作成して通知することもできます。サードパーティライブラリを作ったり、システム内のさまざまなコンポーネントを柔軟で疎結合に保ちたい場合に役に立ちます。</p>
<div class="section" id="events">
<h4>静的な <tt class="docutils literal"><span class="pre">Events</span></tt> クラス<a class="headerlink" href="#events" title="Permalink to this headline">¶</a></h4>
<p>ここでは仮に、新しいイベント - <tt class="docutils literal"><span class="pre">store.order</span></tt> - を作成してみましょう。
このイベントは、アプリケーションで注文が行われるたびにディスパッチされます。
うまくまとめるためには、アプリケーション内に <tt class="docutils literal"><span class="pre">StoreEvents</span></tt> クラスを作成し、ここにイベントの定義やドキュメントを記述していきましょう。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\StoreBundle</span><span class="p">;</span>

<span class="k">final</span> <span class="k">class</span> <span class="nc">StoreEvents</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * システムで注文が行われるたびに store.order イベントが通知される。</span>
<span class="sd">     *</span>
<span class="sd">     * イベントリスナーは Acme\StoreBundle\Event\FilterOrderEvent のインスタンスを受け取る。</span>
<span class="sd">     *</span>
<span class="sd">     * @var string</span>
<span class="sd">     */</span>
    <span class="k">const</span> <span class="no">onStoreOrder</span> <span class="o">=</span> <span class="s1">&#39;store.order&#39;</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
<p>このクラスは、実際には何も処理を行わないことに注意してください。
<tt class="docutils literal"><span class="pre">StoreEvents</span></tt> クラスの目的は、共通イベントに関する情報を集中管理することです。
このイベントに対する各リスナーには、特別な <tt class="docutils literal"><span class="pre">FilterOrderEvent</span></tt> クラスのオブジェクトも渡されます。</p>
</div>
<div class="section" id="id25">
<h4>イベントオブジェクトの作成<a class="headerlink" href="#id25" title="Permalink to this headline">¶</a></h4>
<p>次に、この新しいイベントをディスパッチする時、<tt class="docutils literal"><span class="pre">Event</span></tt> インスタンスを作成してディスパッチャーへ渡します。
ディスパッチャーは渡された Event インスタンスを、イベントの各リスナーへ渡します。
リスナーに何も情報を渡す必要がない場合は、デフォルトの <tt class="docutils literal"><span class="pre">Symfony\Component\EventDispatcher\Event</span></tt> クラスをそのまま使えます。
しかし、イベントに関する何らかの情報をリスナーへ渡したい場合が多いでしょう。
このような場合は、<tt class="docutils literal"><span class="pre">Symfony\Component\EventDispatcher\Event</span></tt> を継承する新しいクラスを作成します。</p>
<p>この例では、各リスナーは架空の <tt class="docutils literal"><span class="pre">Order</span></tt> オブジェクトへアクセスする必要があるとします。
次のように <tt class="docutils literal"><span class="pre">Event</span></tt> クラスを作成します。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\StoreBundle\Event</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\Event</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Acme\StoreBundle\Order</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">FilterOrderEvent</span> <span class="k">extends</span> <span class="nx">Event</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$order</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Order</span> <span class="nv">$order</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">order</span> <span class="o">=</span> <span class="nv">$order</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOrder</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">order</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>各リスナーは、イベントオブジェクトの <tt class="docutils literal"><span class="pre">getOrder</span></tt> メソッドを使って <tt class="docutils literal"><span class="pre">Order</span></tt> オブジェクトにアクセスできます。</p>
</div>
<div class="section" id="id26">
<h4>イベントのディスパッチ<a class="headerlink" href="#id26" title="Permalink to this headline">¶</a></h4>
<p><a href="#id27"><span class="problematic" id="id28">:method:`Symfony\\Component\\EventDispatcher\\EventDispatcher::dispatch`</span></a> メソッドを呼び出すと、指定されたイベントのすべてのリスナーに対して通知します。
このメソッドは、次の 2 つの引数をとります。ディスパッチするイベントの名前と、イベントのリスナーに渡される <tt class="docutils literal"><span class="pre">Event</span></tt> インスタンスです。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Acme\StoreBundle\StoreEvents</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Acme\StoreBundle\Order</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Acme\StoreBundle\Event\FilterOrderEvent</span><span class="p">;</span>

<span class="c1">// 注文を何らかの方法で作成または取得する</span>
<span class="nv">$order</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Order</span><span class="p">();</span>
<span class="c1">// ...</span>

<span class="c1">// FilterOrderEvent を作成し、ディスパッチする</span>
<span class="nv">$event</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FilterOrderEvent</span><span class="p">(</span><span class="nv">$order</span><span class="p">);</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">dispatch</span><span class="p">(</span><span class="nx">StoreEvents</span><span class="o">::</span><span class="na">onStoreOrder</span><span class="p">,</span> <span class="nv">$event</span><span class="p">);</span>
</pre></div>
</div>
<p>このコードでは、特別な <tt class="docutils literal"><span class="pre">FilterOrderEvent</span></tt> オブジェクトを作成し、<tt class="docutils literal"><span class="pre">dispatch</span></tt> メソッドへ渡しています。
これで、<tt class="docutils literal"><span class="pre">store.order</span></tt> イベントに対するすべてのリスナーが <tt class="docutils literal"><span class="pre">FilterOrderEvent</span></tt> を受け取り、<tt class="docutils literal"><span class="pre">getOrder</span></tt> メソッドを使って <tt class="docutils literal"><span class="pre">Order</span></tt> オブジェクトへアクセスできます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// onStoreOrderイベント用に登録するリスナークラス</span>
<span class="k">use</span> <span class="nx">Acme\StoreBundle\Event\FilterOrderEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onStoreOrder</span><span class="p">(</span><span class="nx">FilterOrderEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$order</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">getOrder</span><span class="p">();</span>
    <span class="c1">// 注文に対する何らかの処理</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="id29">
<h3>イベントディスパッチャーオブジェクトを伝える<a class="headerlink" href="#id29" title="Permalink to this headline">¶</a></h3>
<p><tt class="docutils literal"><span class="pre">EventDispatcher</span></tt> クラスのソースコードを読むと、シングルトンではないことに気づくでしょう (<tt class="docutils literal"><span class="pre">getInstance()</span></tt> スタティックメソッドは定義されていません)。
これは設計者の意図で、単一の PHP リクエストの処理中に複数のイベントディスパッチャーを同時に実行したい場合に役立ちます。
その代わりに、イベントへの接続や通知を行う必要があるオブジェクトへ、ディスパッチャーオブジェクトを渡す必要があります。</p>
<p>この問題に対するベストプラクティスは、対象となるオブジェクトへディスパッチャーオブジェクトを注入することで、これを依存性の注入 (dependency injection) と呼びます。</p>
<p>コンストラクタでの注入は、次のようになります。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$dispatcher</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">EventDispatcher</span> <span class="nv">$dispatcher</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dispatcher</span> <span class="o">=</span> <span class="nv">$dispatcher</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>セッターで注入する方法もあります。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$dispatcher</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setEventDispatcher</span><span class="p">(</span><span class="nx">EventDispatcher</span> <span class="nv">$dispatcher</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">dispatcher</span> <span class="o">=</span> <span class="nv">$dispatcher</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>どちらの方法を選ぶかは、好みの問題です。
オブジェクトの生成時に初期化を完了できるようになるので、多くの人はコンストラクタによる注入を利用します。
しかし、依存が多くリストが長くなってしまう場合や、任意の依存があるような場合は、セッターによる注入を使うとよいでしょう。</p>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">上で述べた 2 つの例のような依存性注入を利用する場合は、<a class="reference external" href="https://github.com/symfony/DependencyInjection">Symfony2 Dependency Injection コンポーネント</a>を使うと、とてもきれいにオブジェクトを管理できます。</p>
</div>
</div>
<div class="section" id="index-17">
<span id="id30"></span><h3>イベントサブスクライバを使う<a class="headerlink" href="#index-17" title="Permalink to this headline">¶</a></h3>
<p>イベントを監視する最も一般的な方法は、<em>イベントリスナー</em>をディスパッチャーに登録することです。
リスナーは 1 つ以上のイベントを監視でき、イベントがディスパッチされるたびに通知されます。</p>
<p>イベントを監視するもう 1 つの方法が、<em>イベントサブスクライバ</em> です。
イベントサブスクライバは PHP のクラスで、ディスパッチャーに対してどのイベントが監視されるのかを、サブスクライバクラス自身が通知します。
サブスクライバクラスは <tt class="xref php php-class docutils literal"><span class="pre">Symfony\Component\EventDispatcher\EventSubscriberInterface</span></tt> インタフェース、および <tt class="docutils literal"><span class="pre">getSubscribedEvents</span></tt> というスタティックメソッドを実装します。
次に示すサブスクライバクラスの例では、<tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベントと <tt class="docutils literal"><span class="pre">store.order</span></tt> イベントを監視します。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">namespace</span> <span class="nx">Acme\StoreBundle\Event</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Symfony\Component\EventDispatcher\EventSubscriberInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Symfony\Component\HttpKernel\Event\FilterResponseEvent</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">StoreSubscriber</span> <span class="k">implements</span> <span class="nx">EventSubscriberInterface</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getSubscribedEvents</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
            <span class="s1">&#39;kernel.response&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;onKernelResponse&#39;</span><span class="p">,</span>
            <span class="s1">&#39;store.order&#39;</span>     <span class="o">=&gt;</span> <span class="s1">&#39;onStoreOrder&#39;</span><span class="p">,</span>
        <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onKernelResponse</span><span class="p">(</span><span class="nx">FilterResponseEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">onStoreOrder</span><span class="p">(</span><span class="nx">FilterOrderEvent</span> <span class="nv">$event</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</div>
<p>これはリスナークラスとよく似ていますが、監視するイベントの種類をクラス自身がディスパッチャーに対して通知できる点が異なります。
ディスパッチャーにサブスクライバを登録するには、<a href="#id31"><span class="problematic" id="id32">:method:`Symfony\\Component\\EventDispatcher\\EventDispatcher::addSubscriber`</span></a> メソッドを使います。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Acme\StoreBundle\Event\StoreSubscriber</span><span class="p">;</span>

<span class="nv">$subscriber</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">StoreSubscriber</span><span class="p">();</span>
<span class="nv">$dispatcher</span><span class="o">-&gt;</span><span class="na">addSubscriber</span><span class="p">(</span><span class="nv">$subscriber</span><span class="p">);</span>
</pre></div>
</div>
<p>ディスパッチャーにより、サブスクライバクラスの <tt class="docutils literal"><span class="pre">getSubscribedEvents</span></tt> メソッドで返された各イベントに対して、自動的に登録が行われます。
リスナーと同様に、<tt class="docutils literal"><span class="pre">addSubscriber</span></tt> メソッドには任意で指定できる 2 つ目の引数があり、イベントへ渡す優先度を指定できます。</p>
</div>
<div class="section" id="event-dispatcher-event-propagation">
<span id="index-18"></span><span id="id33"></span><h3>イベントの流れ/伝播を停める<a class="headerlink" href="#event-dispatcher-event-propagation" title="Permalink to this headline">¶</a></h3>
<p>リスナーの処理後に、他のリスナーが呼び出されないようにしたい場合もあります。
つまり、リスナーからディスパッチャーに対して、以降のリスナーへのイベントの伝播を停止する (これ以上リスナーへ通知を行わない) よう要求できるようにしたいのです。
このような場合は、リスナーから <a href="#id34"><span class="problematic" id="id35">:method:`Symfony\\Component\\EventDispatcher\\Event::stopPropagation`</span></a> method: メソッドを呼び出します。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="k">use</span> <span class="nx">Acme\StoreBundle\Event\FilterOrderEvent</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">onStoreOrder</span><span class="p">(</span><span class="nx">FilterOrderEvent</span> <span class="nv">$event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">stopPropagation</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</div>
<p>こうすると、<tt class="docutils literal"><span class="pre">store.order</span></tt> イベントに対して登録されているリスナーのうちまだ呼び出されていないリスナーがあっても、呼び出されなくなります。</p>
</div>
</div>
<div class="section" id="index-19">
<span id="id36"></span><h2>プロファイラ<a class="headerlink" href="#index-19" title="Permalink to this headline">¶</a></h2>
<p>Symfony2 のプロファイラを有効にすると、アプリケーションに対してリクエストがあるたびに、リクエストに関する有益な情報を収集し、後で解析できるように保存します。
開発環境でプロファイラを使うことで、コードのデバッグやパフォーマンス改善が容易になります。
運用環境でプロファイラを使うと、問題が発生した場合の状況の把握などに役立ちます。</p>
<p>Symfony2 には Web デバッグツールバーや Web プロファイラといったプロファイル情報の視覚化ツールがあるので、開発者がプロファイラを直接操作する必要はほとんどありません。
Symfony2 Standard Edition を使っている場合、プロファイラ、Web デバッグツールバー、Web プロファイラは、最初から使えるように設定されています。</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">プロファイラは、単純なリクエスト、リダイレクト、例外、Ajax リクエスト、ESI リクエスト、およびすべての HTTP メソッドとフォーマットといった、リクエストに対するあらゆる情報を収集します。
リクエストとレスポンスの組み合わせ 1 つについて 1 つのプロファイリングデータが生成されるため、1 つの URL に対して複数のプロファイリングデータが生成される場合もあります。</p>
</div>
<div class="section" id="index-20">
<span id="id37"></span><h3>プロファイリングデータの視覚化<a class="headerlink" href="#index-20" title="Permalink to this headline">¶</a></h3>
<div class="section" id="web">
<h4>Web デバッグツールバーを使う<a class="headerlink" href="#web" title="Permalink to this headline">¶</a></h4>
<p>開発環境では、すべてのページの下部に Web デバッグツールバーが表示されます。
Web デバッグツールバーにはプロファイリングデータの要約が表示されており、アプリケーションの動作が意図したものと異なる場合に、原因を手軽に調べることができます。</p>
<p>Web デバッグツールバーに表示される要約では情報が不足している場合は、ツールバーのトークン文字列 (13 文字のランダムな文字列) をクリックして Web プロファイラへアクセスしてください。</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">トークン文字列にリンクが設定されていない場合は、プロファイラ用のルートが登録されていません。
次の節でプロファイラの設定を確認してください。</p>
</div>
</div>
<div class="section" id="id38">
<h4>Web プロファイラを使ったプロファイルデータの解析<a class="headerlink" href="#id38" title="Permalink to this headline">¶</a></h4>
<p>Web プロファイラは、開発環境でコードのデバッグとパフォーマンスの改善に使えるプロファイリングデータの視覚化ツールです。
運用環境で問題を発見する目的で使うこともできます。
Web プロファイラを使うと、プロファイラが収集したすべての情報を Web インタフェースで閲覧することができます。</p>
</div>
<div class="section" id="index-21">
<span id="id39"></span><h4>プロファイル情報へのアクセス<a class="headerlink" href="#index-21" title="Permalink to this headline">¶</a></h4>
<p>Symfony2 のプロファイリングデータは、デフォルトの視覚化ツール (Web プロファイラ) 以外のツールからもアクセスできます。
では、どうやって特定のリクエストに関するプロファイリングデータを抽出すればよいのでしょうか。
プロファイラは、リクエストのプロファイルデータを保存する際、そのデータに関連付けられたトークンも保存します。
このトークンは、レスポンス内の HTTP ヘッダにある <tt class="docutils literal"><span class="pre">X-Debug-Token</span></tt> から取得できます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="nv">$profile</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;profiler&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">loadProfileFromResponse</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>

<span class="nv">$profile</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;profiler&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">loadProfile</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
</pre></div>
</div>
<div class="admonition tip">
<p class="first admonition-title">Tip</p>
<p class="last">プロファイラを有効にしている環境で、Web デバッグツールバーを無効にしていたり、Ajax リクエストのトークンを取得したい場合は、
Firebug などのツールを使って <tt class="docutils literal"><span class="pre">X-Debug-Token</span></tt> HTTP ヘッダの値を調べてください。</p>
</div>
<p><tt class="docutils literal"><span class="pre">find()</span></tt> メソッドを使うと、何らかの条件にマッチするアクセストークンの一覧を取得できます。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// 最新の 10 個のトークンを取得する</span>
<span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;profiler&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>

<span class="c1">// URL に /admin/ を含む最新の 10 個のトークンを取得する</span>
<span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;profiler&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;/admin/&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>

<span class="c1">// ローカルリクエストから最新の 10 個のトークンを取得する</span>
<span class="nv">$tokens</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;profiler&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</pre></div>
</div>
<p>プロファイリングデータが生成されたサーバー環境とは異なるサーバー上でデータの解析を行いたい場合は、<tt class="docutils literal"><span class="pre">export()</span></tt> メソッドと <tt class="docutils literal"><span class="pre">import()</span></tt> メソッドを使います。</p>
<div class="highlight-php"><div class="highlight"><pre><span class="c1">// 運用環境でエクスポートする</span>
<span class="nv">$profile</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;profiler&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">loadProfile</span><span class="p">(</span><span class="nv">$token</span><span class="p">);</span>
<span class="nv">$data</span> <span class="o">=</span> <span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">export</span><span class="p">(</span><span class="nv">$profile</span><span class="p">);</span>

<span class="c1">// 開発環境でインポートする</span>
<span class="nv">$profiler</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</pre></div>
</div>
</div>
<div class="section" id="index-22">
<span id="id40"></span><h4>設定<a class="headerlink" href="#index-22" title="Permalink to this headline">¶</a></h4>
<p>Symfony2 にはデフォルトで、プロファイラ、Web デバッグツールバー、Web プロファイラの実用的な設定が組み込まれています。
開発環境向けの設定は、次のようになっています。</p>
<div class="configuration-block">
<ul class="simple">
<li><em>YAML</em><div class="highlight-yaml"><div class="highlight"><pre><span class="c1"># load the profiler</span>
<span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">profiler</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">only_exceptions</span><span class="p-Indicator">:</span> <span class="nv">false</span> <span class="p-Indicator">}</span>

<span class="c1"># enable the web profiler</span>
<span class="l-Scalar-Plain">web_profiler</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">toolbar</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
    <span class="l-Scalar-Plain">intercept_redirects</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
    <span class="l-Scalar-Plain">verbose</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</pre></div>
</div>
</li>
<li><em>XML</em><div class="highlight-xml"><div class="highlight"><pre><span class="c">&lt;!-- xmlns:webprofiler=&quot;http://symfony.com/schema/dic/webprofiler&quot; --&gt;</span>
<span class="c">&lt;!-- xsi:schemaLocation=&quot;http://symfony.com/schema/dic/webprofiler http://symfony.com/schema/dic/webprofiler/webprofiler-1.0.xsd&quot;&gt; --&gt;</span>

<span class="c">&lt;!-- load the profiler --&gt;</span>
<span class="nt">&lt;framework:config&gt;</span>
    <span class="nt">&lt;framework:profiler</span> <span class="na">only-exceptions=</span><span class="s">&quot;false&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/framework:config&gt;</span>

<span class="c">&lt;!-- enable the web profiler --&gt;</span>
<span class="nt">&lt;webprofiler:config</span>
    <span class="na">toolbar=</span><span class="s">&quot;true&quot;</span>
    <span class="na">intercept-redirects=</span><span class="s">&quot;true&quot;</span>
    <span class="na">verbose=</span><span class="s">&quot;true&quot;</span>
<span class="nt">/&gt;</span>
</pre></div>
</div>
</li>
<li><em>PHP</em><div class="highlight-php"><div class="highlight"><pre><span class="c1">// load the profiler</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;profiler&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;only-exceptions&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">),</span>
<span class="p">));</span>

<span class="c1">// enable the web profiler</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;web_profiler&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;toolbar&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="s1">&#39;intercept-redirects&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
    <span class="s1">&#39;verbose&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
<span class="p">));</span>
</pre></div>
</div>
</li>
</ul>
</div>
<p><tt class="docutils literal"><span class="pre">only-exceptions</span></tt> を <tt class="docutils literal"><span class="pre">true</span></tt> に設定すると、アプリケーションから例外がスローされた場合にのみプロファイリングデータが収集されます。</p>
<p><tt class="docutils literal"><span class="pre">intercept-redirects</span></tt> を <tt class="docutils literal"><span class="pre">true</span></tt> に設定すると、Web プロファイラによってアプリケーションのリダイレクトが捕捉されるようになります。
これにより、アプリケーションがリダイレクト先へ遷移する前に、収集されたプロファイリングデータを確認できます。</p>
<p><tt class="docutils literal"><span class="pre">verbose</span></tt> を <tt class="docutils literal"><span class="pre">true</span></tt> に設定すると、Web デバッグツールバーにより多くの情報が表示されるようになります。
<tt class="docutils literal"><span class="pre">verbose</span></tt> を <tt class="docutils literal"><span class="pre">false</span></tt> に設定すると、2 次的な情報は非表示になります。</p>
<p>Web プロファイラを有効にする場合は、プロファイラ用のルートも同時に有効にしておく必要があります。</p>
<div class="configuration-block">
<ul class="simple">
<li><em>YAML</em><div class="highlight-yaml"><pre>_profiler:
    resource: @WebProfilerBundle/Resources/config/routing/profiler.xml
    prefix:   /_profiler</pre>
</div>
</li>
<li><em>XML</em><div class="highlight-xml"><div class="highlight"><pre><span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&quot;@WebProfilerBundle/Resources/config/routing/profiler.xml&quot;</span> <span class="na">prefix=</span><span class="s">&quot;/_profiler&quot;</span> <span class="nt">/&gt;</span>
</pre></div>
</div>
</li>
<li><em>PHP</em><div class="highlight-php"><div class="highlight"><pre><span class="nv">$collection</span><span class="o">-&gt;</span><span class="na">addCollection</span><span class="p">(</span><span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">import</span><span class="p">(</span><span class="s2">&quot;@WebProfilerBundle/Resources/config/routing/profiler.xml&quot;</span><span class="p">),</span> <span class="s1">&#39;/_profiler&#39;</span><span class="p">);</span>
</pre></div>
</div>
</li>
</ul>
</div>
<p>プロファイラを有効にすると、わずかながｒオーバーヘッドが発生するので、特に運用環境では特定の条件下でのみ有効となるようにしたいでしょう。
<tt class="docutils literal"><span class="pre">only-exceptions</span></tt> 設定で、プロファイリングするページを 500 ページに制限できます。
特定の IP アドレスからのアクセスのみプロファイリングしたり、Web サイト内の一部分に対してのみプロファイリングしたい場合は、リクエストマッチャーを使います。</p>
<div class="configuration-block">
<ul class="simple">
<li><em>YAML</em><div class="highlight-yaml"><div class="highlight"><pre><span class="c1"># 192.168.0.0 ネットワーク内からのリクエストでのみプロファイラを有効にする</span>
<span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">profiler</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">matcher</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">ip</span><span class="p-Indicator">:</span> <span class="nv">192.168.0.0/24</span> <span class="p-Indicator">}</span>

<span class="c1"># /admin 以下の URL に対してのみプロファイラを有効にする</span>
<span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">profiler</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">matcher</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="s">&quot;^/admin/&quot;</span> <span class="p-Indicator">}</span>

<span class="c1"># 複数のルールを結合する</span>
<span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">profiler</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">matcher</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">ip</span><span class="p-Indicator">:</span> <span class="nv">192.168.0.0/24</span><span class="p-Indicator">,</span> <span class="nv">path</span><span class="p-Indicator">:</span> <span class="s">&quot;^/admin/&quot;</span> <span class="p-Indicator">}</span>

<span class="c1"># &quot;custom_matcher&quot; サービスで定義されたカスタムマッチャーインスタンスを使う</span>
<span class="l-Scalar-Plain">framework</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">profiler</span><span class="p-Indicator">:</span>
        <span class="l-Scalar-Plain">matcher</span><span class="p-Indicator">:</span> <span class="p-Indicator">{</span> <span class="nv">service</span><span class="p-Indicator">:</span> <span class="nv">custom_matcher</span> <span class="p-Indicator">}</span>
</pre></div>
</div>
</li>
<li><em>XML</em><div class="highlight-xml"><div class="highlight"><pre><span class="c">&lt;!-- 192.168.0.0 ネットワーク内からのリクエストでのみプロファイラを有効にする --&gt;</span>
<span class="nt">&lt;framework:config&gt;</span>
    <span class="nt">&lt;framework:profiler&gt;</span>
        <span class="nt">&lt;framework:matcher</span> <span class="na">ip=</span><span class="s">&quot;192.168.0.0/24&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:profiler&gt;</span>
<span class="nt">&lt;/framework:config&gt;</span>

<span class="c">&lt;!-- /admin 以下の URL に対してのみプロファイラを有効にする --&gt;</span>
<span class="nt">&lt;framework:config&gt;</span>
    <span class="nt">&lt;framework:profiler&gt;</span>
        <span class="nt">&lt;framework:matcher</span> <span class="na">path=</span><span class="s">&quot;^/admin/&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:profiler&gt;</span>
<span class="nt">&lt;/framework:config&gt;</span>

<span class="c">&lt;!-- 複数のルールを結合する --&gt;</span>
<span class="nt">&lt;framework:config&gt;</span>
    <span class="nt">&lt;framework:profiler&gt;</span>
        <span class="nt">&lt;framework:matcher</span> <span class="na">ip=</span><span class="s">&quot;192.168.0.0/24&quot;</span> <span class="na">path=</span><span class="s">&quot;^/admin/&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:profiler&gt;</span>
<span class="nt">&lt;/framework:config&gt;</span>

<span class="c">&lt;!-- &quot;custom_matcher&quot; サービスで定義されたカスタムマッチャーインスタンスを使う --&gt;</span>
<span class="nt">&lt;framework:config&gt;</span>
    <span class="nt">&lt;framework:profiler&gt;</span>
        <span class="nt">&lt;framework:matcher</span> <span class="na">service=</span><span class="s">&quot;custom_matcher&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:profiler&gt;</span>
<span class="nt">&lt;/framework:config&gt;</span>
</pre></div>
</div>
</li>
<li><em>PHP</em><div class="highlight-php"><div class="highlight"><pre><span class="c1">// 192.168.0.0 ネットワーク内からのリクエストでのみプロファイラを有効にする</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;profiler&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;matcher&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;ip&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;192.168.0.0/24&#39;</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">));</span>

<span class="c1">// /admin 以下の URL に対してのみプロファイラを有効にする</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;profiler&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;matcher&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;^/admin/&#39;</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">));</span>

<span class="c1">// 複数のルールを結合する</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;profiler&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;matcher&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;ip&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;192.168.0.0/24&#39;</span><span class="p">,</span> <span class="s1">&#39;path&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;^/admin/&#39;</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">));</span>

<span class="c1"># &quot;custom_matcher&quot; サービスで定義されたカスタムマッチャーインスタンスを使う</span>
<span class="nv">$container</span><span class="o">-&gt;</span><span class="na">loadFromExtension</span><span class="p">(</span><span class="s1">&#39;framework&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;profiler&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;matcher&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;service&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;custom_matcher&#39;</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">));</span>
</pre></div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="section" id="id41">
<h2>クックブックでさらに学ぶ<a class="headerlink" href="#id41" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li><a class="reference internal" href="../cookbook/testing/profiling.html"><em>ファンクショナルテストでプロファイラを使用する方法</em></a></li>
<li><a class="reference internal" href="../cookbook/profiler/data_collector.html"><em>カスタムデータコレクタの作成方法</em></a></li>
<li><a class="reference internal" href="../cookbook/event_dispatcher/class_extension.html"><em>継承無しでクラスを拡張する方法</em></a></li>
<li><a class="reference internal" href="../cookbook/event_dispatcher/method_behavior.html"><em>継承無しでメソッドの挙動をカスタマイズする方法</em></a></li>
</ul>
</div>
</div>


<div id="page_prev_next">
<a class="prev" href="performance.html">< パフォーマンス</a>
<a class="next" href="stable_api.html">Symfony2 ステーブル API ></a>
</div>

<div class="common_content_footer">
<ul>
  <li> → <a href="http://symfony.com/doc/master/book/internals.html">公式英語ドキュメント</a></li>
  <li> → <a href="https://github.com/symfony/symfony-docs/commits/master/book/internals.rst">原文コミット履歴</a>
  <li> → <a href="https://github.com/symfony-japan/symfony-docs-ja/commits/master/book/internals.rst">翻訳コミット履歴</a>
</ul>
<br />
翻訳の不備などは、お気軽にコメント欄にてご指摘ください。
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'symfony-japan'; // required: replace example with your forum shortname

    // The following are highly recommended additional parameters. Remove the slashes in front to use.
    // var disqus_identifier = 'unique_dynamic_id_1234';
    // var disqus_url = 'http://example.com/permalink-to-page.html';

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>



          </div>
        </div>
      </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
<div class="fb-like-box" data-href="http://www.facebook.com/symfonyjapan" data-width="203" data-show-faces="true" data-stream="true" data-border-color="#FFF" data-header="true"></div>
  <h3>このページのコンテンツ</h3>
  <ul>
<li><a class="reference internal" href="#">内部構造</a><ul>
<li><a class="reference internal" href="#id2">概観</a><ul>
<li><a class="reference internal" href="#httpfoundation"><tt class="docutils literal"><span class="pre">HttpFoundation</span></tt> コンポーネント</a></li>
<li><a class="reference internal" href="#httpkernel"><tt class="docutils literal"><span class="pre">HttpKernel</span></tt> コンポーネント</a></li>
<li><a class="reference internal" href="#frameworkbundle"><tt class="docutils literal"><span class="pre">FrameworkBundle</span></tt> バンドル</a></li>
</ul>
</li>
<li><a class="reference internal" href="#index-1">カーネル</a><ul>
<li><a class="reference internal" href="#index-2">コントローラ</a></li>
<li><a class="reference internal" href="#index-3">リクエストの処理</a></li>
<li><a class="reference internal" href="#index-4">内部リクエスト</a></li>
<li><a class="reference internal" href="#index-5">イベント</a><ul>
<li><a class="reference internal" href="#getrequesttype"><tt class="docutils literal"><span class="pre">getRequestType()</span></tt></a></li>
<li><a class="reference internal" href="#kernel-request"><tt class="docutils literal"><span class="pre">kernel.request</span></tt> イベント</a></li>
<li><a class="reference internal" href="#kernel-controller"><tt class="docutils literal"><span class="pre">kernel.controller</span></tt> イベント</a></li>
<li><a class="reference internal" href="#kernel-view"><tt class="docutils literal"><span class="pre">kernel.view</span></tt> イベント</a></li>
<li><a class="reference internal" href="#kernel-response"><tt class="docutils literal"><span class="pre">kernel.response</span></tt> イベント</a></li>
<li><a class="reference internal" href="#kernel-exception"><tt class="docutils literal"><span class="pre">kernel.exception</span></tt> イベント</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#index-11">イベントディスパッチャー</a><ul>
<li><a class="reference internal" href="#event-dispatcher">イベント</a><ul>
<li><a class="reference internal" href="#index-13">命名規約</a></li>
<li><a class="reference internal" href="#index-14">イベント名とイベントオブジェクト</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id22">ディスパッチャー</a></li>
<li><a class="reference internal" href="#index-15">リスナーの接続</a></li>
<li><a class="reference internal" href="#index-16">イベントの作成とディスパッチ</a><ul>
<li><a class="reference internal" href="#events">静的な <tt class="docutils literal"><span class="pre">Events</span></tt> クラス</a></li>
<li><a class="reference internal" href="#id25">イベントオブジェクトの作成</a></li>
<li><a class="reference internal" href="#id26">イベントのディスパッチ</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id29">イベントディスパッチャーオブジェクトを伝える</a></li>
<li><a class="reference internal" href="#index-17">イベントサブスクライバを使う</a></li>
<li><a class="reference internal" href="#event-dispatcher-event-propagation">イベントの流れ/伝播を停める</a></li>
</ul>
</li>
<li><a class="reference internal" href="#index-19">プロファイラ</a><ul>
<li><a class="reference internal" href="#index-20">プロファイリングデータの視覚化</a><ul>
<li><a class="reference internal" href="#web">Web デバッグツールバーを使う</a></li>
<li><a class="reference internal" href="#id38">Web プロファイラを使ったプロファイルデータの解析</a></li>
<li><a class="reference internal" href="#index-21">プロファイル情報へのアクセス</a></li>
<li><a class="reference internal" href="#index-22">設定</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="reference internal" href="#id41">クックブックでさらに学ぶ</a></li>
</ul>
</li>
</ul>

  <h4>前のドキュメント</h4>
  <p class="topless"><a href="performance.html"
                        title="previous chapter">パフォーマンス</a></p>
  <h4>次のドキュメント</h4>
  <p class="topless"><a href="stable_api.html"
                        title="next chapter">Symfony2 ステーブル API</a></p>
  <h3>ソース</h3>
  <ul class="this-page-menu">
    <li><a href="../_sources/book/internals.txt"
           rel="nofollow">ページのソースを表示</a></li>
  </ul>
<div id="searchbox" style="display: none">
  <h3>クイック検索</h3>
    <form class="search" action="../search.html" method="get">
      <input type="text" name="q" size="18" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    <p class="searchtip" style="font-size: 90%">
    </p>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
          <br />
          <br />
          <div id="other">
            <h3>クイックリンク</h3>
            <ul>
              <li><a href="installation.html">インストール方法</a></li>
              <li><a href="../reference/forms/types.html">FormTypeリファレンス</a></li>
              <li><a href="../reference/constraints.html">バリデータリファレンス</a></li>
              <li><a href="http://twig.sensiolabs.org/documentation">Twigリファレンス</a></li>
              <li><a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html">Doctrine ORMアノテーションリファレンス</a></li>
            </ul>

            <h3>コメントリスト</h3>

<script type="text/javascript" src="http://symfony-japan.disqus.com/combination_widget.js?num_items=10&hide_mods=0&color=grey&default_tab=recent&excerpt_length=200"></script><a href="http://disqus.com/">Powered by Disqus</a>


            <br />
            <p>ご質問や翻訳不備等お気軽にコメントください。</p>

            <br />
            <p>現在、翻訳が古くなっている箇所が多くあります。1箇所、1行などほんの少量でもかまいませんので、ドキュメント翻訳にご協力いただける方を募集しています。<a href="http://groups.google.com/group/symfony-users-ja">日本 Symfony ユーザー会メーリングリスト</a>までご連絡ください。</p>
          </div>
        </div>
      </div>
      <div class="clearer"></div>
    </div>

      </div>
      <!-- end #main -->
    </div>
    <!-- end #content_wrapper -->
  </div>
  <!-- end #content -->


  <div id="footer">
    <div id="footer_wrapper">
      <div id="footer_content">
        <div style=" position: relative;">
          <div id="footer_left"></div>
          <div id="footer_right"></div>
        </div>
        <div id="f_navbar">
        <ul>
          <li><a href="../index.html">トップ（索引）</a></li>
          <li><a href="../quick_tour/index.html">クイックツアー</a></li>
          <li><a href="index.html">ガイドブック</a></li>
          <li><a href="../cookbook/index.html">クックブック</a></li>
          <li><a href="../components/index.html">コンポーネント</a></li>
          <li><a href="../reference/index.html">リファレンス</a></li>
          <li><a href="../contributing/index.html">貢献</a></li>
          <li><a href="http://www.symfony.gr.jp/">日本Symfonyユーザー会</a></li>
        </ul>
      </div>
      <!-- end #navbar -->
        <div>
          <p id="copyright">
            Copyright &copy; 2011-2013 Symfony Japan. All rights reserved.
            &nbsp;&nbsp;&nbsp;Bandwidth and hardware provided by <a href="http://www.asial.co.jp/">アシアル株式会社</a>
            &nbsp;&nbsp;Powered by <a href="http://sphinx.pocoo.org/">Sphinx</a>
          </p>
        </div>
      </div>
      <!-- end #footer_content -->
        </div>
        <!-- end #footer_wrapper -->
      </div>
      <!-- end #footer -->
    </div>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-16659283-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
  </body>
</html>
